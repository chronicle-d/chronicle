#!/bin/bash

ANSI_BLACK="\e[30m"
ANSI_BLACK_BACKGROUND="\e[40m"
ANSI_RED="\e[31m"
ANSI_RED_BACKGROUND="\e[41m"
ANSI_GREEN="\e[32m"
ANSI_GREEN_BACKGROUND="\e[42m"
ANSI_BROWN="\e[33m"
ANSI_BROWN_BACKGROUND="\e[43m"
ANSI_BLUE="\e[34m"
ANSI_BLUE_BACKGROUND="\e[44m"
ANSI_PURPLE="\e[35m"
ANSI_PURPLE_BACKGROUND="\e[45m"
ANSI_CYAN="\e[36m"
ANSI_CYAN_BACKGROUND="\e[46m"
ANSI_GREY="\e[37m"
ANSI_GREY_BACKGROUND="\e[47m"

## Style
ANSI_BOLD="\e[1m"
ANSI_ITALIAN="\e[3m"
ANSI_UNDERLINE="\e[4m"
ANSI_BLINK="\e[5m"
ANSI_REVERSED_VIDEO="\e[7m"
ANSI_STRIKETHROUGH="\e[9m"
ANSI_END="\e[0m"

echo -e " ${ANSI_BOLD}${ANSI_UNDERLINE}${ANSI_ITALIAN}${ANSI_BLUE}Chronicle:${ANSI_END}\n"

function inform {
  TYPE="$1"
  shift
  case "$TYPE" in
  0)
    echo -e "${ANSI_BOLD}${ANSI_CYAN}[-]${ANSI_END} $*"
    ;;
  1)
    echo -e "${ANSI_BOLD}${ANSI_BROWN}[*]${ANSI_END} $*"
    ;;
  2)
    echo -e "${ANSI_BOLD}${ANSI_RED}[!]${ANSI_END} $*"
    ;;
  esac
}

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
set -euo pipefail
SCRIPT_DIR="$(realpath "$(dirname "$0")")"
CHRONICLE_WEB_UI="${SCRIPT_DIR}/chronicle_web_ui"
CHRONICLE_BASE="${SCRIPT_DIR}/chronicle_base_OLD"
serviceUp=true

# Check directories
[[ -d "$CHRONICLE_WEB_UI" ]] || {
  inform 2 "$CHRONICLE_WEB_UI not found"
  exit 1
}
[[ -d "$CHRONICLE_BASE" ]] || {
  inform 2 "$CHRONICLE_BASE not found"
  exit 1
}

# Check commands
command -v npm >/dev/null || {
  inform 2 "npm not found"
  exit 1
}
command -v flask >/dev/null || {
  inform 2 "flask not found"
  exit 1
}

# Cleanup function to kill background jobs
cleanup() {
  if $serviceUp; then
    serviceUp=false
    inform 0 "Shutting down..."
    pkill -P $$ || true # Kill all child processes of this script
    wait
    inform 0 "All processes terminated."
  fi
}

# Trap termination signals
trap cleanup SIGINT SIGTERM EXIT

# Start processes

inform 0 "Starting npm development server..."
npm --prefix "$CHRONICLE_WEB_UI" run dev &>/dev/null &
npm_pid=$!
#sleep 1
if ! kill -0 "$npm_pid" 2>/dev/null; then
  inform 2 "Failed to start npm dev server."
  cleanup
  exit 1
fi

inform 0 "Starting Flask server..."
flask --app "${CHRONICLE_BASE}/API" run >/dev/null &
flask_pid=$!
sleep 1
if ! kill -0 "$flask_pid" 2>/dev/null; then
  inform 2 "Failed to start Flask server."
  cleanup
  exit 1
fi

sleep 1

clear

echo -e "${ANSI_BOLD} â€¢ Serving Chronicle at:${ANSI_END} ${ANSI_BOLD}${ANSI_CYAN}http://localhost:3000/${ANSI_END}\n"

while $serviceUp; do
  echo -en "  ${ANSI_BOLD}>${ANSI_END} "
  read CMDLINE

  if [ "${CMDLINE}" == "quit" ]; then
    echo
    cleanup
  elif [ -n "${CMDLINE}" ]; then
    ./ChronicleCLI -C ${CMDLINE}
    echo
  fi
done

# Wait for background jobs
wait
